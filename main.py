# 1.  (5 баллов) Написать функцию div_by_5, принимающую 1 аргумент — число от 0 до 1000 
# (проверять входные данные не нужно), и возвращающую True, если оно делится на 5 без остатка, и False - иначе.

# def div_by_5(x):
#     for i in range(0, 1001):
#         if x % 5 == 0:
#             return True
       
#     else: 
#         return False

# print(div_by_5(6))

# 2. (15 баллов) Напишите функцию которая называется explore_list, 
# которая принимает в качестве аргумента список из чисел (проверять, что он состоит из чисел НЕ нужно) 
# и возвращает словарь, у которого должна быть следующая структура:
# {
#     ‘less_that_15’: # список элементов, которые меньше 15,
#     ‘middle’: # средний элемент в списке по индексу (без сортировки),
#     ‘odd’: # список из всех нечетных элементов в списке,
#     ‘even’: # список из всех четных элементов в списке
# }


# s="012345678"
# >>> l = len(s)//2
# >>> s[l if len(s) % 2 else l - 1:l + 1]
# '4'

# def explore_list (a,b,c):
    
#     for i in a,b,c:
#         if i <=15 and i !=0:
#            print (f'less_that_15:{i}')

# "это не решилось"
#     # for j in a, b, c:
#     #     if  j == len(explore_list) / 2 and j 
#     #        print (f'middle: {j}')
    
#     for n in a,b,c:
#         if n % 2 ==0: 
#             print(f'even: {n}')
#         else: 
#             print(f'odd: {n}')
    
    

# explore_list (1,2,80)



# 3. (20 баллов) Напишите функцию id_generator, 
# которая должна сгенерировать набор числовых данных длиной в 16 символов 
# из целочисленных значений и вернуть в качестве строкового значения



# 4. (15 баллов) Напишите функцию factorial, которая будет получать 
# в качестве аргумента число и ВОЗВРАЩАТЬ факториал этого числа.



# n = 1
# def factorial (x):
#     for i in range(2, x+1) :
#         print (f'факториал числа {x}: ')
 
# factorial (5)



# 5. (10 баллов) Создайте функцию, которая называется my_color, 
# данная функция принимает в качестве аргумента строковое значение. 
# Полученное значение функция должна записать в файл, который будет называться my_color.txt. 
# (Каждая следующая запись должна перезаписывать предыдущие записи)

# f = open('my_color.txt', 'rw')
# f.read(1)

# def my_color(n):




# 6. (15 баллов) Создать функцию get_car, которая описывает автомобиль. Данная функция принимает в 
# себя два обязательных аргумента и далее ПРОИЗВОЛЬНЫЙ НАБОР ИМЕННОВАННЫХ АРГУМЕНТОВ **kwargs. 
# Обязательные аргументы это brand (марка машины) и year (год выпуска). Далее из всех полученных аргументов 
# функция должна построить словарь, содержащий все свойства автомобиля, переданные в качестве аргументов


def get_car (brand, name, **details):
    print('Название марки: {brand}')
    for year,condition in details.items():
        print(f'{year}: {condition}')


get_car ("Mercedes","AMG", 2022 : 'Good')

# 7. (20 баллов) Создать функцию maskify, которая заменяет все символы, кроме последних четырех, на «#».
#     Например
#     "4556364607935616”     -->     "############5616"
#      "64607935616"          -->          "#######5616"
#                "1"              -->    "1"
#                 "4321"              -->    "4321"
# def maskify(x):
#   grid_len = int(len(x)) - 4
#   return "#" * grid_len + x[-4:]

# maskify(4556364607935616)

# def maskify(x):
#     for i in x[:-4]:
#         result = x.replace(i, '#')
#         print(result)

# maskify(int(4556364607935616))